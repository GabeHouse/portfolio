type GridCell @model {
  id: ID!
  x: Int!
  y: Int!
  color: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Query {
  getGridCell(id: ID!): GridCell
  listGridCells(filter: ModelGridCellFilterInput, limit: Int, nextToken: String): ModelGridCellConnection
}

type Mutation {
  createGridCell(input: CreateGridCellInput!): GridCell
  updateGridCell(input: UpdateGridCellInput!): GridCell
  deleteGridCell(input: DeleteGridCellInput!): GridCell
}

type Subscription {
  onCreateGridCell: GridCell @aws_subscribe(mutations: ["createGridCell"])
  onUpdateGridCell: GridCell @aws_subscribe(mutations: ["updateGridCell"])
  onDeleteGridCell: GridCell @aws_subscribe(mutations: ["deleteGridCell"])
}

input CreateGridCellInput {
  id: ID
  x: Int!
  y: Int!
  color: String!
}

input UpdateGridCellInput {
  id: ID!
  x: Int
  y: Int
  color: String
}

input DeleteGridCellInput {
  id: ID!
}

input ModelGridCellFilterInput {
  id: ModelIDInput
  x: ModelIntInput
  y: ModelIntInput
  color: ModelStringInput
  and: [ModelGridCellFilterInput]
  or: [ModelGridCellFilterInput]
  not: ModelGridCellFilterInput
}

type ModelGridCellConnection {
  items: [GridCell]
  nextToken: String
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}